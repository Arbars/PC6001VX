// ---------------------------------------------------------------------------
//	Device関連クラス
//	  Original     : cisc
//	  Modification : Yumitaro
// ---------------------------------------------------------------------------

#include <string.h>
#include <new>

#include "device.h"



////////////////////////////////////////////////////////////////
// DeviceList
////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////
// コンストラクタ
////////////////////////////////////////////////////////////////
DeviceList::DeviceList( void ) : node(NULL) {}


////////////////////////////////////////////////////////////////
// デストラクタ
////////////////////////////////////////////////////////////////
DeviceList::~DeviceList( void )
{
	Cleanup();
}


////////////////////////////////////////////////////////////////
// ノード検索
////////////////////////////////////////////////////////////////
DeviceList::Node *DeviceList::FindNode( const ID id )
{
	for( Node *n = node; n; n = n->next ){
		if( n->entry->GetID() == id )
			return n;
	}
	return NULL;
}


////////////////////////////////////////////////////////////////
// デバイスリスト全消去
////////////////////////////////////////////////////////////////
void DeviceList::Cleanup( void )
{
	Node *n = node;
	while( n ){
		Node *nx = n->next;
		delete n;
		n = nx;
	}
	node = NULL;
}


////////////////////////////////////////////////////////////////
// デバイス追加
////////////////////////////////////////////////////////////////
bool DeviceList::Add( IDevice *t )
{
	ID id = t->GetID();
	if( !id ) return false;
	
	Node *n = FindNode( id );
	if( n ){
		n->count++;
		return true;
	}else{
		n = new Node;
		if( !n ) return false;
		n->entry = t;
		n->next  = node;
		n->count = 1;
		node = n;
		return true;
	}
}


////////////////////////////////////////////////////////////////
// デバイス削除(ポインタ)
////////////////////////////////////////////////////////////////
bool DeviceList::Del( IDevice *t )
{
	return t->GetID() ? Del( t->GetID() ) : false;
}


////////////////////////////////////////////////////////////////
// デバイス削除(ID)
////////////////////////////////////////////////////////////////
bool DeviceList::Del( const ID id )
{
	for( Node **r = &node; *r; r = &((*r)->next) ){
		if( ((*r)->entry->GetID() == id) && ((*r)->count) ){
			((*r)->count)--;
//		if( (*r)->entry->GetID() == id ){
//			Node* d = *r;
//			if( !--d->count ){
//				*r = d->next;
//				delete d;
//			}
			return true;
		}
	}
	return false;
}


////////////////////////////////////////////////////////////////
// デバイス検索
////////////////////////////////////////////////////////////////
IDevice *DeviceList::Find( const ID id )
{
	Node *n = FindNode( id );
	return n ? n->entry : NULL;
}
