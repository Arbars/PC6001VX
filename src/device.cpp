// ---------------------------------------------------------------------------
//	Device関連クラス
//	  Original     : cisc
//	  Modification : Yumitaro
// ---------------------------------------------------------------------------

#include <string.h>
#include <new>

#include "device.h"



////////////////////////////////////////////////////////////////
// DeviceList
////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////
// コンストラクタ
////////////////////////////////////////////////////////////////
DeviceList::DeviceList( void ) {}


////////////////////////////////////////////////////////////////
// デストラクタ
////////////////////////////////////////////////////////////////
DeviceList::~DeviceList( void )
{
	Cleanup();
}


////////////////////////////////////////////////////////////////
// ノード検索
////////////////////////////////////////////////////////////////
DeviceList::Node *DeviceList::FindNode( const ID id )
{
	std::map<int, Node>::iterator p = nodeMap.find(id);
	if ( p != nodeMap.end() ){
		return &p->second;
	}
	return NULL;
}


////////////////////////////////////////////////////////////////
// デバイスリスト全消去
////////////////////////////////////////////////////////////////
void DeviceList::Cleanup( void )
{
	nodeMap.clear();
}


////////////////////////////////////////////////////////////////
// デバイス追加
////////////////////////////////////////////////////////////////
bool DeviceList::Add( IDevice *t )
{
	ID id = t->GetID();
	if( !id ) return false;
	
	Node *n = FindNode( id );
	if( n ){
		n->count++;
		return true;
	}else{
		Node& n = nodeMap[id];
		n.entry = t;
		n.count = 1;
		return true;
	}
}


////////////////////////////////////////////////////////////////
// デバイス削除(ポインタ)
////////////////////////////////////////////////////////////////
bool DeviceList::Del( IDevice *t )
{
	return t->GetID() ? Del( t->GetID() ) : false;
}


////////////////////////////////////////////////////////////////
// デバイス削除(ID)
////////////////////////////////////////////////////////////////
bool DeviceList::Del( const ID id )
{
	if ( Node *n = FindNode(id) ) {
		n->count--;
		return true;
	}
	return false;
}


////////////////////////////////////////////////////////////////
// デバイス検索
////////////////////////////////////////////////////////////////
IDevice *DeviceList::Find( const ID id )
{
	Node *n = FindNode( id );
	return n ? n->entry : NULL;
}
